This is a list of all the tasks specified as part of the bounty to be completed before submission for approval. 

They can be originally found at: https://github.com/dfinity/grant-rfps/issues/2

Each task (or subtask) when completed will have its corresponding commit hash next to a ☑️ to mark it as complete. 

Every completed task is only commited if all tests finish successfully. 

This was created to make it easier for someone to quickly verify everything has been completed. 

{
    ✶ Finish 'invoice canister cleanup by krpeacock' 
    | Pull Request 356 
    https://github.com/dfinity/examples/pull/356

    [ Before work for the bounty could be started, there was a pull request that wasn't finished being merged.
        The changes are the first half of the 'Invoice Cleanup Tasks'. Migrating to install a local ICP ledger 
        canister using the dfx nns command was also added as one of the objectives of this pull request. ]

    - Migrate to using nns install and updating corresponding account ids of test identities in e2e testing 
        ☑️ check
    - Minor fix of meta constraints during invoice creation 
        ☑️ check
}
{
    ✶ Invoice Cleanup Tasks 
    | Issue 292
    https://github.com/dfinity/examples/issues/292

    - Add access control for creating new invoices 
        ☑️ check
    - Refactor permission checks to a method 
        ☑️ check
    - Fix check account for transfer fee during transfer (during invoice verification)
        ☑️ check (pull request 356)
}
{
    ✶ Prevent arithmetic overflow when amount in TransferArgs is below 10_000 
    | Issue 35
    https://github.com/dfinity/invoice-canister/issues/35

    - Return an error if the requested transfer amount from a principal subaccount is less than the transfer fee 
        to do ☑️
}
{
    ✶ SEC Cleanup 
    | Issue 29 
    https://github.com/dfinity/invoice-canister/issues/29

    - "redundant argument in verify_invoice: The caller is no longer needed in ICPVerifyInvoiceArgs..."
        to do ☑️       
    - "In verify_invoice the from_subaccount is re-computed. Would it be better to..."
        ☑️ not necessary? would be redundant since subaccount is easily computed from id and creator which is immutable in invoice itself      
    - "verify_invoice still has a TODO that should be removed."
        1/2 ☑️ half check (sec-f12) -> seller-client-example needs updating
    - "in refund_invoice let replaced = invoices.put(i.id, updatedInvoice) is irritating since put does not"
        to do ☑️ to be resolved in sec-f30
    - "get_invoice returns invoice by default: If the switch statement does not return, the method returns the"
        ☑️ (resolved)          
    - "get_invoice permissions: IIUC one always needs to put the buyer principal in the canGet permissions."
        to do ☑️ to do in documentation (not necessary to always add, only if should have get permission: should be clearly stated in documentation)
    - "unused code: defaultSubAccount is never used and should be deleted"
        ☑️ check (sec-f12)            
}
{
    ✶ SEC-F27 principalToSubaccount uses no domain separator  
    | Issue 28 
    https://github.com/dfinity/invoice-canister/issues/28

    - "For domain separation to be effective, we recommend to also add a domain separator to principalToSubaccount." 
        ☑️ done
}
{
    ✶ SEC-F22 Potentially sensitive invoice details are stored in plain text on the canister  
    | Issue 26 
    https://github.com/dfinity/invoice-canister/issues/26

    - "This should be documented." 
        ( Or the data could be encrypted but canister threshold encryption is not yet available. ) 
        to do ☑️
}
{
    ✶ SEC-F21 Anonymous principal has an account 
    | Issue 25 
    https://github.com/dfinity/invoice-canister/issues/25

    - "disallow the anonymous principal" 
        to do ☑️
}
{
    ✶ SEC-F05 TOCTOU in verify_invoice   
    | Issue 21
    https://github.com/dfinity/invoice-canister/issues/21

    - Verification of an invoice should be prevented from overwriting itself in case verification is called while verification is happening
        to do ☑️
}
{
    ✶ SEC-F12 Copied libraries 
    | Issue 26 
    https://github.com/dfinity/invoice-canister/issues/20

    - "Use [sha256, crc32, hex] libraries as a dependency rather than copy them"
        ☑️ check
}
{
    ✶ SEC-F29 Incomplete design documentation
    | Issue 19 
    https://github.com/dfinity/invoice-canister/issues/19

    - "Extend the design document and in particular address the points given here."
        ( These points are: limitations, what's stored on the canister, how each method of the API works with respect to custody and state change, 
          nature of the subaccounts used, flow of funds through the invoice life cycle and invoice canister, and Basic Payment Flow should not be hypothetical. )
        ☑️ in progress
}
{
    ✶ SEC-F17 Uncertified Queries
    | Issue 16 
    https://github.com/dfinity/invoice-canister/issues/16

    - get_invoice, get_account_identifier, get_balance are query calls and should be update calls or explicitly stated they are risk vectors in documentation
        to do ☑️
}
{
    ✶ SEC-F30 Funds can get stuck in invoice accounts
    | Issue 13 
    https://github.com/dfinity/invoice-canister/issues/13

    - To recover funds sent to an address controlled by the invoice canister that are not processed by the normal invoice lifecycle, there needs to be a means of recovering or handling these funds
        to do ☑️
}
{
    ✶ SEC-F20 Controller of canister could take all funds by upgrading
    | Issue 12 
    https://github.com/dfinity/invoice-canister/issues/12

    - There needs to be better access control for how the authority over the invoice canister is defined. Specifically this topic needs to be discussed in documentation as well as there could be a creation allow list allowing delegation of invoice creation and processing. 
        ( The context of this issue was as if the invoice canister would become applied for use by a DAO, however that's a project in itself. To prepare for such a possibility, more access control could be introduced: admin level role who can add and remove principals from invoice creation allow list, as well as move funds from any subaccount, and a consolidation account role, which currently will be mapping invoices to their creators so they can only move funds from their own accounts)
        ☑️ done
}
{
    ✶ Support for the ICRC-1 fungible token standard
all to do 
    - add local ICRC-1 ledger canister to project and update the install script
        ☑️
    - modify Invoice type to include ICRC-1 payment addressing
        ☑️
    - implement for creating invoice subaccount for ICRC-1 token 
        ☑️
    - implement for creating consolidation subaccount for ICRC-1 token
        ☑️
    - add ICRC-1 Ledger Motoko typings 
        ☑️
    - implement direct get_balance 
        ☑️
    - implement direct transfer 
        ☑️
    - implement verification logic 
        ☑️
    - implement refund logic 
        ☑️
    - implement transfer logic with access control 
        ☑️
}



